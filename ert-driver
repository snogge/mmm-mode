#! /bin/sh
# ert-driver - Emacs ert test driver script
#set -x
scriptversion=2022-10-24.21; # UTC

# Copyright (C) 2011-2018 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# As a special exception to the GNU General Public License, if you
# distribute this file as part of a program that contains a
# configuration script generated by Autoconf, you may include it under
# the same distribution terms that you use for the rest of that program.

# This file is maintained in Automake, please report
# bugs to <bug-automake@gnu.org> or send patches to
# <automake-patches@gnu.org>.

# Make unconditional expansion of undefined variables an error.  This
# helps a lot in preventing typo-related bugs.
set -u

usage_error ()
{
  echo "$0: $*" >&2
  print_usage >&2
  exit 2
}

print_usage ()
{
  cat <<END
Usage:
  test-driver --test-name=NAME --log-file=PATH --trs-file=PATH
              [--expect-failure={yes|no}] [--color-tests={yes|no}]
              [--enable-hard-errors={yes|no}] [--]
              TEST-SCRIPT [TEST-SCRIPT-ARGUMENTS]
The '--test-name', '--log-file' and '--trs-file' options are mandatory.
END
}

loaddirs=  # Emacs Load path

test_name= # Used for reporting.
log_file=  # Where to save the output of the test script.
trs_file=  # Where to save the metadata of the test run.
expect_failure=no
color_tests=no
enable_hard_errors=yes
while test $# -gt 0; do
  case $1 in
  --help) print_usage; exit $?;;
  --version) echo "test-driver $scriptversion"; exit $?;;
  --test-name) test_name=$2; shift;;
  --log-file) log_file=$2; shift;;
  --trs-file) trs_file=$2; shift;;
  --color-tests) color_tests=$2; shift;;
  --expect-failure) expect_failure=$2; shift;;
  --enable-hard-errors) enable_hard_errors=$2; shift;;
  --) shift; break;;
  -*) usage_error "invalid option: '$1'";;
   *) break;;
  esac
  shift
done

missing_opts=
test x"$test_name" = x && missing_opts="$missing_opts --test-name"
test x"$log_file"  = x && missing_opts="$missing_opts --log-file"
test x"$trs_file"  = x && missing_opts="$missing_opts --trs-file"
if test x"$missing_opts" != x; then
  usage_error "the following mandatory options are missing:$missing_opts"
fi

if test $# -eq 0; then
  usage_error "missing argument"
fi

if test $color_tests = yes; then
  # Keep this in sync with 'lib/am/check.am:$(am__tty_colors)'.
  red='[0;31m' # Red.
  grn='[0;32m' # Green.
  lgn='[1;32m' # Light green.
  blu='[1;34m' # Blue.
  mgn='[0;35m' # Magenta.
  std='[m'     # No color.
else
  red= grn= lgn= blu= mgn= std=
fi

do_exit='rm -f $log_file $trs_file; (exit $st); exit $st'
trap "st=129; $do_exit" 1
trap "st=130; $do_exit" 2
trap "st=141; $do_exit" 13
trap "st=143; $do_exit" 15

# Test script is run here.

while test $# -gt 0; do
  case $1 in
    -L|--directory)
      loaddirs="$loaddirs -L $2"; shift;;
    *.el)
      testfile=$1;;
  -*) usage_error "invalid option: '$1'";;
   *) break;;
  esac
  shift
done

EMACS_TEST_VERBOSE=t \
  ${EMACS:-emacs} --batch -Q $loaddirs -l $testfile -f ert-run-tests-batch-and-exit 2>&1 |
  tee $log_file |
  sed -n \
	  -e '/ *\(FAILED\|failed\|PASSED\|passed\|skipped\) *[0-9]\+\/[0-9]\+ *\([^[:blank:]]\+\).*/!d' \
      -e "s//\1${std}: \2/" \
      -e "s/FAILED/${red}FAIL/" \
	  -e "s/failed/${lgn}XFAIL/" \
	  -e "s/PASSED/${red}PASS/" \
	  -e "s/passed/${grn}XPASS/" \
	  -e "s/skipped/${blu}SKIP/" \
      -ep

sed -n -f - $log_file >$trs_file <<SED
# Unless it is a test status line, delete and move on to the next line
/^ *\(FAILED\|failed\|PASSED\|passed\|skipped\) *[0-9]\+\/[0-9]\+ *\([^[:blank:]]\+\).*/!d
s//\1 \2/
s/FAILED/FAIL/
s/failed/XFAIL/
s/PASSED/XPASS/
s/passed/PASS/
s/skipped/SKIP/
s/^/:test-result:/p
SED

global=$(sed -n '/:test-result:\([^ ]\+\) .*/s//\1/p' $trs_file |
			 sort | uniq -c | tr -s ' ' | fmt)
if grep -qv :test-result:PASS $trs_file; then
	fail=yes
else
	fail=no
fi
cat - >>$trs_file <<EOF
:global-test-result: $global
:recheck: $fail
:copy-in-global-log: $fail
EOF


# Local Variables:
# mode: shell-script
# sh-indentation: 2
# eval: (add-hook 'before-save-hook 'time-stamp)
# time-stamp-start: "scriptversion="
# time-stamp-format: "%:y-%02m-%02d.%02H"
# time-stamp-time-zone: "UTC0"
# time-stamp-end: "; # UTC"
# End:
